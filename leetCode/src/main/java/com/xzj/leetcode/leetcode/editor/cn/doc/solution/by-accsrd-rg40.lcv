### 解题思路

非常基础的DP。
遍历每个房子，更新偷这个房子/不偷这个房子的最大收益。
不偷，则最大收益为上一个房子的最大收益。
偷，则最大收益为上一个房子不偷+这个房子的钱（因为题目限定非负，不需要另作讨论）

环形房子多了两个注意点：
1. 偷了第一家不能偷最后一家，反之亦然，因此我们对删除第一个/删除最后一个的两个子数组进行DP
2. 如果只有1个房子，需要写边界条件，直接返回nums[0]

### 代码

* python3

```python3
class Solution:
    def rob(self, nums: List[int]) -> int:

        def sub_rob(nums):
            not_rob_here, rob_here = 0, nums[0]
            for i in range(1, len(nums)):
                not_rob_here, rob_here = max(rob_here, not_rob_here), not_rob_here + nums[i]
            return max(not_rob_here, rob_here)
        
        return max(sub_rob(nums[1:]), sub_rob(nums[:-1])) if len(nums) > 1 else nums[0]
```

